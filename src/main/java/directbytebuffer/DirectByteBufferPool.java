package directbytebuffer;import java.nio.ByteBuffer;import java.nio.ReadOnlyBufferException;/** * Created by demopoo on 2017/9/3. */public class DirectByteBufferPool {    /*往buffer里面写数据时候的position的位置*/    public int writeIndex;    /*当buffer处于读状态下时候limit的大小*/    public int readIndex;    /*当buffer处于读状态下时的position的位置*/    public int readMark;    /*当前所处的读写状态，true 表示处于读，false表示处于写。    * 默认处于写状态    * */    private boolean isReadOnly = false;    public boolean isReading(){        return isReadOnly;    }    public boolean isWriting(){        return isReadOnly == false;    }    private final ByteBuffer byteBuffer;    public ByteBuffer getByteBuffer() {        return byteBuffer;    }    public DirectByteBufferPool(ByteBuffer byteBuffer){        this.byteBuffer = byteBuffer;    }    public void flip(){        if (this.isReadOnly){            this.isReadOnly = false;        }else {            this.isReadOnly = true;        }    }    /**     * 重置buffer     */    public void reset(){        this.writeIndex = 0;        this.readIndex = 0;        this.readMark = 0;        this.isReadOnly = false;        this.byteBuffer.clear();    }    /**     * 压缩buffer,压缩规则如下：     * 1、当writeBuffer > buffer.capacity()*2/3     */    public void compact(){        byteBuffer.position(readMark);        byteBuffer.limit(writeIndex);        byteBuffer.compact();        this.writeIndex = byteBuffer.position();        this.readIndex -= readMark;        this.readMark = 0;    }    /**     * 往bytebuffer 里面写入byte数组     * @param bt byte数组数据     * @return     */    public DirectByteBufferPool put(byte[] bt){        if (isReadOnly)            throw new ReadOnlyBufferException();        this.byteBuffer.position(writeIndex);        this.byteBuffer.put(bt);        this.writeIndex += bt.length;        return this;    }    /**     * 往bytebuffer 里面写入长度为length 的byte[] 数组数据     * @param bt     * @param offset 待写入数据的的起始位置     * @param length 待写入数据的长度     * @return     */    public DirectByteBufferPool put(byte[] bt,int offset,int length){        if (isReadOnly)            throw new ReadOnlyBufferException();        this.byteBuffer.position(writeIndex);        this.byteBuffer.put(bt,offset,length);        this.writeIndex += length;        return this;    }    /**     *从buffer 中读取 bt 长度的数据     * @param bt     * @return     */    public DirectByteBufferPool get(byte[] bt){        if (bt.length > (readIndex - readMark))            throw new IndexOutOfBoundsException();        this.byteBuffer.position(readMark);        this.byteBuffer.get(bt);        readMark += bt.length;        return this;    }    /**     * 清除缓冲区的所有数据     */    public void clear(){        this.byteBuffer.clear();        readIndex = 0;        writeIndex = 0;        readMark = 0;        isReadOnly = false;    }}
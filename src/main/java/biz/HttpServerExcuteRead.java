package biz;import session.HttpSession;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;import java.nio.channels.SelectionKey;import java.nio.channels.SocketChannel;import java.nio.file.Paths;import java.nio.file.StandardOpenOption;import java.util.*;/** * Created by demopoo on 2017/8/2. */public class HttpServerExcuteRead implements Runnable{    private SelectionKey selectionKey;    private int splitbyte = 0;    private  String fileName;    //缓冲区内内容实际长度    private int rlen;    private String protocolVersion;    private String userAgent;    private Hashtable<String,String> header;    private String accept;    private String acceptEncoding;    private String acceptLanguage;    private String cookie;    private HttpSession httpSession = new HttpSession();    private Map<String,String> map;    private static SocketChannel socketChannel;    private static FileChannel fileChannel;    public HttpServerExcuteRead(SelectionKey selectionKey,String fileName){        this.selectionKey = selectionKey;        this.fileName = fileName;    }    public synchronized void run() {        try {            this.fileChannel = FileChannel.open(Paths.get("/Users/demopoo/Desktop/"+fileName),StandardOpenOption.WRITE,StandardOpenOption.CREATE);            this.socketChannel = (SocketChannel)selectionKey.channel();            ByteBuffer byteBuffer = ByteBuffer.allocate(1500);            map = new HashMap<String, String>();            int len = 0;            while ((len = socketChannel.read(byteBuffer)) > 0){                byteBuffer.flip();                httpSession = new HttpSession();                this.rlen = byteBuffer.limit();                if (this.rlen == 0)                    continue;                this.splitbyte = httpSession.excuteHttpHeaderLen(byteBuffer.array(),rlen);                this.header = new Hashtable<String, String>();                Map<String,String> mp = httpSession.excuteHttpHeader(byteBuffer.array(),splitbyte);                this.map.putAll(mp);                if (splitbyte < rlen){                    byteBuffer.position(splitbyte);                    this.fileChannel.write(byteBuffer);                }                byteBuffer.clear();            }            StringBuffer stringBuffer = new StringBuffer();            this.protocolVersion = map.get("protocolVersion");            stringBuffer.append(this.protocolVersion+"\r\n");            String host = map.get("Host");            if (host != null){                httpSession.responseHeader(stringBuffer,"Host",host);            }            if ("HTTP/1.1".equals(this.protocolVersion)){                httpSession.responseHeader(stringBuffer,"Connection","keep-alive");            }            this.userAgent = map.get("User-Agent");            if (userAgent != null){                httpSession.responseHeader(stringBuffer,"User-Agent",this.userAgent);            }            this.accept = map.get("Accept");            if (accept != null){                httpSession.responseHeader(stringBuffer,"Accept",this.accept);            }            this.acceptEncoding = map.get("Accept-Encoding");            if (acceptEncoding != null){                httpSession.responseHeader(stringBuffer,"Accept-Encoding",this.acceptEncoding);            }            this.acceptLanguage = map.get("Accept-Language");            if (acceptLanguage != null){                httpSession.responseHeader(stringBuffer,"Accept-Language",this.acceptLanguage);            }            this.cookie = map.get("Cookie");            if (this.cookie == null){                httpSession.responseHeader(stringBuffer,"Set-Cookie", UUID.randomUUID().toString().replace("-",""));            }            httpSession.responseHeader(stringBuffer,"Content-Type","text/html;charset=utf-8"+"\r\n");            httpSession.responseHeader(stringBuffer,"Content-Length","50"+"\r\n");            stringBuffer.append("\r\n");            stringBuffer.append("this is puyu's http post test");            ByteBuffer bf = ByteBuffer.allocate(1500);            bf.put(stringBuffer.toString().getBytes());            bf.flip();            socketChannel.write(bf);            bf.clear();        }catch (IOException ex){            ex.printStackTrace();        }finally {            try {                this.socketChannel.close();                this.selectionKey.cancel();            }catch (IOException exe){                exe.printStackTrace();            }        }    }}
package reactormode.sessions.http;import reactormode.buffer.DirectByteBufferPools;import reactormode.handle.NIOHandle;import reactormode.sessions.Session;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.*;import java.nio.file.OpenOption;import java.nio.file.Paths;import java.nio.file.StandardOpenOption;/** * Created by demopoo on 2017/9/9. */public class HttpSessions implements Session {    public Selector selector;    public SocketChannel socketChannel;    public DirectByteBufferPools directByteBufferPools;    private NIOHandle curNIOHandler;    public ByteBuffer byteBuffer;    public SelectionKey selectionKey;    public void setCurNIOHandler(NIOHandle curNIOHandler) {        this.curNIOHandler = curNIOHandler;    }    public NIOHandle getCurNIOHandler() {        return curNIOHandler;    }    public HttpSessions(Selector selector, SocketChannel socketChannel, DirectByteBufferPools directByteBufferPools) throws ClosedChannelException{        this.selector = selector;        this.socketChannel = socketChannel;        this.directByteBufferPools = directByteBufferPools;        this.byteBuffer = directByteBufferPools.getByteBuffer();        selectionKey = socketChannel.register(selector, SelectionKey.OP_READ,this);    }    /**     * 处理channal 中的数据     */    public void socketRead() throws IOException{        FileChannel fileChannel = FileChannel.open(Paths.get("/Users/demopoo/Desktop/"+System.currentTimeMillis()+".png"), StandardOpenOption.WRITE,StandardOpenOption.CREATE);        if (directByteBufferPools.isReading())            directByteBufferPools.flip();        if(directByteBufferPools.writeIndex > directByteBufferPools.getByteBuffer().limit()/2*3)            directByteBufferPools.compact();        byteBuffer.position(directByteBufferPools.writeIndex);        int len = 0;        while ((len = socketChannel.read(byteBuffer)) > 0){            if (directByteBufferPools.isWriting())                directByteBufferPools.flip();            directByteBufferPools.readIndex = byteBuffer.position();            byteBuffer.position(directByteBufferPools.readMark);            byteBuffer.limit(directByteBufferPools.readIndex);            fileChannel.write(byteBuffer);            directByteBufferPools.compact();        }        StringBuffer stringBuffer = new StringBuffer();        stringBuffer.append("message receive ok ....");        if (directByteBufferPools.isReading())            directByteBufferPools.flip();        byteBuffer.position(directByteBufferPools.writeIndex);        if(directByteBufferPools.writeIndex > directByteBufferPools.getByteBuffer().limit()/1*3)            directByteBufferPools.compact();        directByteBufferPools.put(stringBuffer.toString().getBytes());        directByteBufferPools.writeIndex = byteBuffer.position();        directByteBufferPools.readIndex = byteBuffer.position();        byteBuffer.position(directByteBufferPools.readMark);        byteBuffer.limit(directByteBufferPools.readIndex);        socketChannel.write(byteBuffer);        directByteBufferPools.compact();    }}
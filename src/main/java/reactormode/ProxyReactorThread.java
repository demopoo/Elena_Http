package reactormode;import reactormode.buffer.DirectByteBufferPools;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.ServerSocketChannel;import java.util.Iterator;import java.util.Set;/** * Created by demopoo on 2017/9/9. */public class ProxyReactorThread extends Thread {    final Selector selector;    final ServerSocketChannel serverSocketChannel;    public Selector getSelector() {        return selector;    }    public ServerSocketChannel getServerSocketChannel() {        return serverSocketChannel;    }    public ProxyReactorThread() throws IOException{        selector = Selector.open();        serverSocketChannel = ServerSocketChannel.open();        serverSocketChannel.bind(new InetSocketAddress(9898));        serverSocketChannel.configureBlocking(false);        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);    }    public void processSocketRead(SelectionKey selectionKey) throws IOException{        System.out.println(1);    }    public void processSocketWrite(SelectionKey selectionKey) throws IOException{        System.out.println(2);    }    public void processSocketAccept(SelectionKey selectionKey) throws IOException{        System.out.println(3);    }    @Override    public void run() {        Set<SelectionKey> selectionkeys = null;        try {            while (true){                selector.select();                selectionkeys = selector.selectedKeys();                for (SelectionKey selectionKey : selectionkeys){                    if (selectionKey.isAcceptable()){                        this.processSocketAccept(selectionKey);                    }else if (selectionKey.isReadable()){                        this.processSocketRead(selectionKey);                    }else if (selectionKey.isWritable()){                        this.processSocketWrite(selectionKey);                    }                }                selectionkeys.clear();            }        }catch (IOException ex){            ex.printStackTrace();        }    }}
package reactormode;import reactormode.buffer.DirectByteBufferPools;import reactormode.sessions.Session;import reactormode.sessions.http.HttpSessionsManager;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;/** * Created by demopoo on 2017/9/9. */public class NIOAccepter extends ProxyReactorThread {    public SocketChannel socketChannel;    public ServerSocketChannel serverSocketChannel;    public NIOAccepter() throws IOException {        super();    }    public void processSocketAccept(SelectionKey selectionKey) throws IOException {        serverSocketChannel = (ServerSocketChannel)selectionKey.channel();        socketChannel = serverSocketChannel.accept();        socketChannel.configureBlocking(false);        DirectByteBufferPools directByteBufferPools = new DirectByteBufferPools(ByteBuffer.allocateDirect(1024*10));        HttpSessionsManager httpSessionsManager = new HttpSessionsManager();        httpSessionsManager.createSession(selector,socketChannel,directByteBufferPools);    }    public void processSocketRead(SelectionKey selectionKey) throws IOException {        Session session = (Session)selectionKey.attachment();        session.getCurNIOHandler().onSocketRead(session);    }    public void processSocketWrite(SelectionKey selectionKey) throws IOException {        Session session = (Session)selectionKey.attachment();        session.getCurNIOHandler().onSocketWrite(session);    }}
package reactor;import directbytebuffer.DirectByteBufferPool;import reactor.evenhandler.ReadHandler;import reactor.evenhandler.ReadHandler_DirectPool;import reactor.evenhandler.handfactory.ServerListener;import reactor.filechannel.CreateFileChannel;import reactor.receive.HttpRequest;import reactor.session.ConnectSession;import threadpool.ThreadPoolCommen;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.*;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.concurrent.ExecutorService;import java.util.concurrent.Future;/** * Created by demopoo on 2017/9/4. */public class MainHttpServer_DirectPool {    private ServerSocketChannel serverSocketChannel;    private SocketChannel socketChannel;    private ByteBuffer byteBuffer;    private volatile Selector selector;    private static volatile Map<SelectionKey,FileChannel> map = new HashMap<SelectionKey, FileChannel>();    private volatile Iterator<SelectionKey> sks;    private ExecutorService service = ThreadPoolCommen.achieveThread();    private int num = 0;    public MainHttpServer_DirectPool(int port){        try {            this.serverSocketChannel = ServerSocketChannel.open();            this.serverSocketChannel.bind(new InetSocketAddress(port));            this.serverSocketChannel.configureBlocking(false);            this.selector = Selector.open();            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);        }catch (IOException ex){            ex.printStackTrace();        }    }    public void run(){        try {            while (true){                selector.select();                try {                    sks = selector.selectedKeys().iterator();                    while (sks.hasNext()){                        SelectionKey sk = sks.next();                        sks.remove();                        if (!sk.isValid())                            continue;                        if (sk.isAcceptable()){                            ServerListener serverListener = EvenHandlerFactory.getServerListener("AcceptHandler");                            serverListener.OnAccept();                            ServerSocketChannel serverSocketChannel = (ServerSocketChannel)sk.channel();                            SocketChannel socketChannel = serverSocketChannel.accept();                            socketChannel.configureBlocking(false);                            SelectionKey selectionKeys = socketChannel.register(selector,SelectionKey.OP_READ);                            /*创建会话*/                            ConnectSession connectSession = new ConnectSession(socketChannel,selectionKeys);                            selectionKeys.attach(connectSession);                            CreateFileChannel createFileChannel = new CreateFileChannel();                            Future future = this.service.submit(createFileChannel);                            Object object = future.get();                            if (object != null){                                map.put(selectionKeys,(FileChannel)object);                            }                            HttpRequest httpRequest = new HttpRequest(socketChannel);                            serverListener = EvenHandlerFactory.getServerListener("AcceptedHandler");                            serverListener.OnAccepted(httpRequest);                        }else if (sk.isReadable()){                            SocketChannel sc = (SocketChannel)sk.channel();                            HttpRequest httpRequest = new HttpRequest(sc);                            ServerListener serverListener = new ReadHandler_DirectPool();//EvenHandlerFactory.getServerListener("ReadHandler");                            serverListener.OnRead(sks,selector,sk,map);                            service.submit(serverListener);                            sk.interestOps(sk.interestOps() &~ sk.OP_READ);                        } else if (sk.isWritable()){                            if (!sk.isValid())                                return;                            DirectByteBufferPool directByteBufferPool = (DirectByteBufferPool) sk.attachment();                            ByteBuffer byteBuffer = directByteBufferPool.getByteBuffer();                            SocketChannel socketChannel = (SocketChannel)sk.channel();                            if (byteBuffer != null){                                if (directByteBufferPool.isWriting())                                    directByteBufferPool.flip();                                byteBuffer.position(directByteBufferPool.readMark);                                byteBuffer.limit(directByteBufferPool.readIndex);                                socketChannel.write(byteBuffer);                                if (byteBuffer.hasRemaining()){                                    directByteBufferPool.compact();                                    sk.attach(directByteBufferPool);                                    sk.interestOps(sk.interestOps() | SelectionKey.OP_WRITE);                                }else {                                    sk.attach(null);                                    sk.interestOps(sk.interestOps() &~ SelectionKey.OP_WRITE);                                    sk.channel().close();                                }                            }                        }                    }                }catch (CancelledKeyException ex){                    ex.printStackTrace();                }            }        }catch (IOException ex){            ex.printStackTrace();        }catch (Exception ex){            ex.printStackTrace();        }    }}
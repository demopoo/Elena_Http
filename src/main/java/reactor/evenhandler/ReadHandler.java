package reactor.evenhandler;import reactor.EvenHandlerFactory;import reactor.evenhandler.handfactory.EvenHandlerAdapter;import reactor.receive.HttpRequest;import session.HttpSession;import javax.script.Invocable;import javax.script.ScriptEngine;import javax.script.ScriptEngineManager;import java.io.FileReader;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.SocketChannel;import java.nio.file.Paths;import java.nio.file.StandardOpenOption;import java.util.*;/** * Created by demopoo on 2017/8/16. */public class ReadHandler extends EvenHandlerAdapter {    private SelectionKey selectionKey;    private int splitbyte = 0;    //缓冲区内内容实际长度    private int rlen;    private String protocolVersion;    private String userAgent;    private Hashtable<String,String> header;    private String accept;    private String acceptEncoding;    private String acceptLanguage;    private String cookie;    private String requestURL;    private HttpSession httpSession = new HttpSession();    private Map<String,String> map = new HashMap<String, String>();    private Map<String,String> paramsMap;    private static SocketChannel socketChannel;    private static FileChannel fileChannel;    private Object object;    private Selector selector;    private Map<SelectionKey,FileChannel> maps;    private Iterator<SelectionKey> sks;    public void OnRead(Iterator<SelectionKey> sks,Selector selector,SelectionKey selectionKey,Map<SelectionKey,FileChannel> maps) {        this.selectionKey = selectionKey;        this.maps = maps;        this.selector = selector;        this.sks = sks;    }    @Override    public synchronized void run() {        try {            this.fileChannel = maps.get(selectionKey);            this.socketChannel = (SocketChannel)selectionKey.channel();            ByteBuffer byteBuffer = ByteBuffer.allocate(1500);            int len = 0;            while ((len = socketChannel.read(byteBuffer)) > 0){                byteBuffer.flip();                httpSession = new HttpSession();                this.rlen = byteBuffer.limit();                if (this.rlen == 0)                    continue;                this.splitbyte = httpSession.excuteHttpHeaderLen(byteBuffer.array(),rlen);                this.header = new Hashtable<String, String>();                Map<String,String> mp = httpSession.excuteHttpHeader(byteBuffer.array(),splitbyte);                this.map.putAll(mp);                if (mp.get("Content-Type") != null){                    if (mp.get("Content-Type").contains("multipart/form-data")){                        if (splitbyte < rlen){                            byteBuffer.position(splitbyte);                            this.fileChannel.write(byteBuffer);                        }                    }                }                byteBuffer.clear();            }            StringBuffer stringBuffer = new StringBuffer();            this.protocolVersion = map.get("protocolVersion");            stringBuffer.append(this.protocolVersion+"\r\n");            String host = map.get("Host");            if (host != null){                httpSession.responseHeader(stringBuffer,"Host",host);            }            if ("HTTP/1.1".equals(this.protocolVersion)){                httpSession.responseHeader(stringBuffer,"Connection","keep-alive");            }            this.userAgent = map.get("User-Agent");            if (userAgent != null){                httpSession.responseHeader(stringBuffer,"User-Agent",this.userAgent);            }            this.accept = map.get("Accept");            if (accept != null){                httpSession.responseHeader(stringBuffer,"Accept",this.accept);            }            this.acceptEncoding = map.get("Accept-Encoding");            if (acceptEncoding != null){                httpSession.responseHeader(stringBuffer,"Accept-Encoding",this.acceptEncoding);            }            this.acceptLanguage = map.get("Accept-Language");            if (acceptLanguage != null){                httpSession.responseHeader(stringBuffer,"Accept-Language",this.acceptLanguage);            }            this.cookie = map.get("Cookie");            if (this.cookie == null){                httpSession.responseHeader(stringBuffer,"Set-Cookie", UUID.randomUUID().toString().replace("-",""));            }            httpSession.responseHeader(stringBuffer,"Content-Type","text/html;charset=utf-8"+"\r\n");            stringBuffer.append("\r\n");            //there is return content,should return by params            requestURL = map.get("url");            if (requestURL != null){                int indexN = requestURL.indexOf('?');                if (indexN > 0){                    paramsMap = httpSession.handleReqParams(requestURL,indexN);                    //dynamic handle                    ScriptEngineManager scriptEngineManager = new ScriptEngineManager();                    ScriptEngine scriptEngine = scriptEngineManager.getEngineByName("nashorn");                    scriptEngine.eval(new FileReader("src/main/java/reactor/webapp/common.js"));                    Invocable invocable = (Invocable)scriptEngine;                    object = invocable.invokeFunction("studentName",paramsMap.get("user"),paramsMap.get("password"));                }            }            int puyu = socketChannel.socket().getSendBufferSize();            stringBuffer.append(object==null?"receive img over":object.toString());            ByteBuffer bf = ByteBuffer.allocate(puyu*5);            bf.put(stringBuffer.toString().getBytes());//            for (int i = 0;i<bf.capacity()-500;i++){//                bf.put("a".getBytes());//            }            bf.flip();            socketChannel.write(bf);            if (bf.hasRemaining()){                System.out.println("*********************data not send ok************"+bf.remaining());                bf = bf.compact();                selectionKey.attach(bf);                int numb = selectionKey.interestOps();                int number = selectionKey.interestOps() | SelectionKey.OP_WRITE;                selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_WRITE);            }else {                System.out.println("*********************first is send ok,my friends************"+bf.remaining());                selectionKey.attach(null);                selectionKey.interestOps(selectionKey.interestOps() &~ SelectionKey.OP_WRITE);            }            socketChannel.register(selector,SelectionKey.OP_READ);            if (len == -1){                selectionKey.cancel();            }            selectionKey.selector().wakeup();        }catch (IOException ex){            ex.printStackTrace();            selectionKey.cancel();        }catch (Exception ex){            ex.printStackTrace();            selectionKey.cancel();        }finally {            sks.remove();//            try {//                this.socketChannel.close();//                this.selectionKey.cancel();//            }catch (IOException exe){//                exe.printStackTrace();//            }        }    }    @Override    public void afterPropertiesSet() throws Exception {        EvenHandlerFactory.addEvenHandler(this.getClass().getSimpleName(),this);    }}
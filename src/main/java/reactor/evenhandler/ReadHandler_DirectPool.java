package reactor.evenhandler;import directbytebuffer.DirectByteBufferPool;import reactor.EvenHandlerFactory;import reactor.evenhandler.handfactory.EvenHandlerAdapter;import reactor.session.ConnectSession;import session.HttpSession;import javax.script.Invocable;import javax.script.ScriptEngine;import javax.script.ScriptEngineManager;import java.io.FileReader;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.ReadOnlyBufferException;import java.nio.channels.*;import java.util.*;/** * Created by demopoo on 2017/9/4. */public class ReadHandler_DirectPool extends EvenHandlerAdapter {    private SelectionKey selectionKey;    private String protocolVersion;    private String userAgent;    private Hashtable<String,String> header;    private String accept;    private String acceptEncoding;    private String acceptLanguage;    private String cookie;    private String requestURL;    private HttpSession httpSession = new HttpSession();    private Map<String,String> paramsMap;    private Object object;    private Selector selector;    private Map<SelectionKey,FileChannel> maps;    private Iterator<SelectionKey> sks;    private ConnectSession connectSession;    public void OnRead(Iterator<SelectionKey> sks,Selector selector,SelectionKey selectionKey,Map<SelectionKey,FileChannel> maps) {        this.selectionKey = selectionKey;        this.maps = maps;        this.selector = selector;        this.sks = sks;    }    @Override    public synchronized void run() {        try {            FileChannel fileChannel = maps.get(selectionKey);            SocketChannel socketChannel = (SocketChannel)selectionKey.channel();            connectSession = (ConnectSession) selectionKey.attachment();            DirectByteBufferPool directByteBufferPool = connectSession.getDirectByteBufferPool();            if (directByteBufferPool.isReading())                throw new ReadOnlyBufferException();            ByteBuffer byteBuffer = directByteBufferPool.getByteBuffer();            if (directByteBufferPool.writeIndex > byteBuffer.capacity()*2/3)                directByteBufferPool.compact();            byteBuffer.position(directByteBufferPool.writeIndex);            int len = 0,rlen = 0;            Map<String,String> map = new HashMap<String, String>();            while ((len = socketChannel.read(byteBuffer)) > 0){                directByteBufferPool.readIndex = byteBuffer.position();                if (directByteBufferPool.isWriting())                    directByteBufferPool.flip();                byteBuffer.position(directByteBufferPool.readMark);                byteBuffer.limit(directByteBufferPool.readIndex);                fileChannel.write(byteBuffer);//                directByteBufferPool.readMark = byteBuffer.position();                directByteBufferPool.compact();            }            StringBuffer stringBuffer = new StringBuffer();            stringBuffer.append("hello world");            int puyu = socketChannel.socket().getSendBufferSize();            stringBuffer.append(object==null?"receive img over":object.toString());            if (directByteBufferPool.isReading())                directByteBufferPool.flip();            byteBuffer.position(directByteBufferPool.writeIndex);            directByteBufferPool.put(stringBuffer.toString().getBytes());            directByteBufferPool.readIndex = byteBuffer.position();            byteBuffer.position(directByteBufferPool.readMark);            byteBuffer.limit(directByteBufferPool.readIndex);            socketChannel.write(byteBuffer);            if (byteBuffer.hasRemaining()){                directByteBufferPool.compact();                selectionKey.attach(directByteBufferPool);                selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_WRITE);                selectionKey.selector().wakeup();            }else {//                bf.clear();                selectionKey.attach(null);                selectionKey.interestOps(selectionKey.interestOps() &~ SelectionKey.OP_WRITE);                selectionKey.channel().close();            }        }catch (ClosedChannelException ex){            ex.printStackTrace();        }catch (IOException ex){            ex.printStackTrace();        }catch (Exception ex){            ex.printStackTrace();;        }    }    @Override    public void afterPropertiesSet() throws Exception {        EvenHandlerFactory.addEvenHandler(this.getClass().getSimpleName(),this);    }}
package bytebuffer;import java.nio.ByteBuffer;/** * Created by demopoo on 2017/8/27. */public class ByteBufferAnalysis {    public static void main(String[] args){        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);        String str = "justdoit,myalwaysfriends!";        byteBuffer.put(str.getBytes());        byteBuffer.mark();        byteBuffer.put("thankyou".getBytes());        /****************put(byte[] bt,int offset,int length)*///        byteBuffer.position(0);//        byteBuffer.put("--demopoo".getBytes(),0,6);//        System.out.println(new String(byteBuffer.array()));        /****************put(byte[] bt)*///        byteBuffer.position(0);//        byteBuffer.put("--demopoo".getBytes());//        System.out.println(new String(byteBuffer.array()));        /****************put(byte bt)*///        System.out.println(new String(byteBuffer.array()));//        byteBuffer.put((byte)'D');//        System.out.println(new String(byteBuffer.array()));        /****************put(Index index,byte bt)*///        System.out.println(new String(byteBuffer.array()));//        byteBuffer.put(0,(byte)'D');//        System.out.println(new String(byteBuffer.array()));        /****************get()  get(Index index)*///        System.out.println(byteBuffer.position());//        byte bt = byteBuffer.get(0);//        System.out.println(new String(new byte[]{bt}));//        byte bt1 = byteBuffer.get(1);//        System.out.println(new String(new byte[]{bt1}));//        System.out.println(byteBuffer.position());//        byteBuffer.flip();        /******************get(byte[] bt ,int offset,int leng)*///        int pos = byteBuffer.position();//        System.out.println(new String(byteBuffer.array()));////        byteBuffer.reset();//        int smallpos = byteBuffer.position();//        byte[] bt = new byte[50];//        byteBuffer.get(bt,0,(pos-smallpos));//        System.out.println(new String(bt));        /******************get(byte[] bt)*///        byte[] bt = new byte[330];//        byteBuffer.position(0);//or byteBuffer.flip()//        byteBuffer.get(bt);//        System.out.println(new String(bt));    }}/** 关于ByteByffer 用法总结*   | 关于 get 的用法*       |1、get() 从当前position位置读取一个byte的数据，并将position+1*       |2、get(int index) 读取bytebuffer 里面下标为index的byte，且position 不变*       |3、get(byte[] bt,int offset,int length) 从当前position开始读，读取length个byte 存入到bt 里面下标从offset 到 offset+length的区域*       |4、get(byte[] bt) 从当前byteBuffer 的position位置取byte[] 长度的内容村到byte[] 里。如果byte[]长度大于Bytebuffer 则报错 BufferUnderflowException**   | 关于 put 的用法*       |1、put(Index index,byte bt) 往ByteBuffer 下标为 index 的位置插入一个字节byte ，并替换掉以前的字节数据。且position的位置不变*       |2、put(byte bt)往ByteBuffer 的position位置插入一个字节，并且position + 1(并替换掉以前的字节数据)*       |3、put(byte[] bt) 往ByteBuffer 的position位置插入字节数据bt,且position + bt.length(注：插入字节数据的总长度不能大于 byteBuffer的长度)(并替换掉以前的字节数据)*       |4、put(byte[] bt,int offset,int length) 往bytebuffer 的position 位置插入长度为length的数据，且position+length，且数据来之 byte[] ，起始位置为offset ，且长度为length（并替换掉以前的字节数据）*   | 关于 compact（) 的用法：ByteBuffer 压缩。* */